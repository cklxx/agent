#!/bin/bash

# Code Agent CLI 启动脚本
# 这个脚本提供了一个便捷的方式来启动Code Agent CLI工具
SCRIPT_DIR="$(dirname "${BASH_SOURCE[0]}")"
MAIN_SCRIPT="$SCRIPT_DIR/main.py"

# 检查主脚本是否存在
if [ ! -f "$MAIN_SCRIPT" ]; then
    echo "❌ 错误: 找不到主脚本: $MAIN_SCRIPT"
    exit 1
fi

# 检查是否安装了uv
if ! command -v uv &> /dev/null; then
    echo "❌ 错误: 需要安装uv包管理器"
    echo "请访问 https://github.com/astral-sh/uv 获取安装说明"
    exit 1
fi

# 显示使用说明
show_help() {
    echo "🤖 Code Agent CLI - 智能编程助手"
    echo ""
    echo "用法:"
    echo "  ./code_agent \"任务描述\"                        # 直接执行编程任务"
    echo "  ./code_agent --interactive                     # 交互式模式，可选择内置问题"
    echo "  ./code_agent \"任务描述\" --debug               # 启用调试模式"
    echo "  ./code_agent \"任务描述\" --max_plan_iterations 2  # 设置最大规划迭代次数"
    echo "  ./code_agent \"任务描述\" --max_step_num 5      # 设置计划最大步骤数"
    echo "  ./code_agent \"任务描述\" --no-background-investigation  # 禁用背景调研"
    echo "  ./code_agent --help                           # 显示帮助信息"
    echo ""
    echo "核心特性:"
    echo "  • 智能任务规划和执行"
    echo "  • 多角色协作 (规划师、研究员、编码员、报告员)"
    echo "  • 自动代码生成和文件操作"
    echo "  • 终端命令执行和环境管理"
    echo "  • 反思和重新规划机制"
    echo "  • 支持简单任务直接执行"
    echo ""
    echo "工作流程:"
    echo "  1. 协调器分析任务复杂度"
    echo "  2. 简单任务直接执行，复杂任务制定计划"
    echo "  3. 团队协作执行具体步骤"
    echo "  4. 报告员生成最终报告和质量评估"
    echo ""
    echo "示例:"
    echo "  ./code_agent \"创建一个HTTP客户端\""
    echo "  ./code_agent \"重构用户模块\" --debug"
    echo "  ./code_agent \"分析代码性能问题\" --max_step_num 10"
    echo "  ./code_agent --interactive"
    echo ""
    echo "更多信息请查看: python main.py --help"
}

# 如果请求帮助
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    show_help
    exit 0
fi

# 启动Code Agent
echo "🚀 启动 Code Agent..."

# 处理参数
ARGS=()

# 如果没有任何参数，则使用交互模式
if [ $# -eq 0 ]; then
    echo "ℹ️  未提供参数，启动交互模式"
    ARGS+=("--interactive")
else
    # 将所有参数传递给main.py
    ARGS+=("$@")
fi

cd "$SCRIPT_DIR"
uv run python "$MAIN_SCRIPT" "${ARGS[@]}" 